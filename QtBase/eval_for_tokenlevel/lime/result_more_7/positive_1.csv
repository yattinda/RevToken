label,status,file_dir,change_id,change_num,patch_set,shaped_code,before_code,after_code,line,ref
1,1,src/corelib/io/qresource.cpp,I0ff4ed146fe53922691d5473d0c236f31d478a04,318137,1,ok data len file read char data data len ,"                ok = (data_len == file.read((char *)data, data_len));","                ok = (data_len == file.read(reinterpret_cast<char *>(data), data_len));\n                ok = (data_len == file.read(reinterpret_cast<char *>(data), data_len));\n",1202,refs/changes/37/318137/1
1,1,src/gui/accessible/qaccessiblecache.cpp,I72b2d5a93f6b397fd3666d45951109e3e5aff754,300336,4,QVector QPair QAccessible Id const QMetaObject values objectToId values obj ,"    QVector<QPair<QAccessible::Id, const QMetaObject*>> values = objectToId.values(obj);",    if (const QMetaObject *mo = obj->metaObject()) {\n        for (auto pair : objectToId.values(obj)) {\n,130,refs/changes/36/300336/4
1,1,tests/manual/qopenglwidget/openglwidget/main.cpp,Ie0455c890c048c52eacad1badd6d21df999badf9,306957,1,Tools t wnd glw<NUMBER> QList QWidget glw glw<NUMBER> glw<NUMBER> glw<NUMBER> ,"    Tools t(&wnd, glw3, QList<QWidget *>() << glw << glw2 << glw3 << glw4);","    Tools t(&wnd, glw3, QWidgetList { glw, glw2, glw3, glw4 });\n    Tools t(&wnd, glw3, QWidgetList { glw, glw2, glw3, glw4 });\n",215,refs/changes/57/306957/1
1,1,src/tools/androiddeployqt/main.cpp,I1fac51ed9e88ef42c761bc916ba1c3bf439806e8,309567,1, To canceal the keystore information the keystore and alias n ,"                    ""       ** To canceal the keystore information, the keystore and alias\n""","                    ""         passwords respectively. This option needs only the --sign parameter.\n""\n                    ""       NOTE: To conceal the keystore information, the environment variables\n""\n                    ""         QT_ANDROID_KEYSTORE_PATH, and QT_ANDROID_KEYSTORE_ALIAS are used to\n""",636,refs/changes/67/309567/1
1,1,src/gui/painting/qprintrangecollection.cpp,I0be5a8a64781c411f83b96a24f216605a84958e5,258431,2,std sort intervals begin intervals end const QPair int int a const QPair int int b ,"    std::sort(intervals.begin(), intervals.end(), [](const QPair<int, int> &a, const QPair<int, int> &b) {","    std::sort(intervals.begin(), intervals.end());\n    std::sort(intervals.begin(), intervals.end());\n",53,refs/changes/31/258431/2
1,1,src/corelib/kernel/qvariant.cpp,I65aac3ec4d50d62424ee33f44b99f3cfb91121d6,267954,1, if defined QT BOOTSTRAPPED QT CONFIG easingcurve ,#if !defined(QT_BOOTSTRAPPED) && QT_CONFIG(easingcurve),#if QT_CONFIG(easingcurve)\n#if QT_CONFIG(easingcurve)\n,2795,refs/changes/54/267954/1
1,1,src/tools/androiddeployqt/main.cpp,Iad8c74d30d090adf69a17f2dafb455dff50b3d99,317412,1,QString fileName QFileInfo reader attributes value QLatin<NUMBER>String file toString filePath ,"                    QString fileName = QFileInfo(reader.attributes().value(QLatin1String(""file"")).toString()).filePath();","                    QString fileName = QDir::cleanPath(reader.attributes().value(QLatin1String(""file"")).toString());\n                    QString fileName = QDir::cleanPath(reader.attributes().value(QLatin1String(""file"")).toString());\n",1633,refs/changes/12/317412/1
1,1,src/corelib/tools/qpoolallocator.h,I1ee03f2182201ba6d0c9f5189ab80af8cadce683,270142,1,auto previous std atomic load typename ArenaData AtomicNode d atomicStack ,            auto previous = std::atomic_load<typename ArenaData::AtomicNode>(&d->atomicStack);,            auto previous = d->atomicStack.load(std::memory_order_relaxed);\n            auto previous = d->atomicStack.load(std::memory_order_relaxed);\n,178,refs/changes/42/270142/1
1,1,src/testlib/qtestjunitstreamer.cpp,I55598eafa7dafa486ac5a8221029c332ff47413b,329830,5, Errors are written as CDATA within system out comments elsewhere,"    // Errors are written as CDATA within system-out, comments elsewhere","    // respectively, comments elsewhere\n    // Messages/errors are written as CDATA within system-out, system-err,\n    // respectively, comments elsewhere",151,refs/changes/30/329830/5
1,1,src/corelib/thread/qpromise.h,Ibab9681d35fe63754bf394ad0e7923e2683e2457,300337,1,void setFilterMode bool enable d setFilterMode enable ,    void setFilterMode(bool enable) { d.setFilterMode(enable); },"\n        d.reportResult(std::forward<U>(result), index);\n",99,refs/changes/37/300337/1
1,1,src/corelib/thread/qfuture.h,I9494ddc58c6db192c66edb988105927da6d61a3b,294437,7,template typename T T typename QtPrivate EnableForNonVoid T ,"    template<typename T_ = T, typename = QtPrivate::EnableForNonVoid<T_>>","    template<typename U = T, typename = QtPrivate::EnableForNonVoid<U>>\n    template<typename U = T, typename = QtPrivate::EnableForNonVoid<U>>\n",65,refs/changes/37/294437/7
1,1,src/corelib/kernel/qproperty.h,I3551e4357fe5780fb75da80bf8be208ec152dc2a,305075,2,if constexpr std is invocable v decltype Callback Class ,"        if constexpr (std::is_invocable_v<decltype(Callback), Class>) {","            // When newValue is T, we move it, if it's const T& it stays const T& and won't get moved\n        if constexpr (CallbackAcceptsOldValue) {\n            // When newValue is T, we move it, if it's const T& it stays const T& and won't get moved",480,refs/changes/75/305075/2
1,1,src/corelib/tools/qcommandlineparser.cpp,Ib6211b24cdaa4683a4f62c90b5a1a20ba69f1cff,336736,1,usage qApp qApp arguments constFirst QStringLiteral executable name ,"    usage += qApp ? qApp->arguments().constFirst() : QStringLiteral(""<executable_name>"");","    usage += qApp ? QCoreApplication::arguments().constFirst() : QStringLiteral(""<executable_name>"");\n    usage += qApp ? QCoreApplication::arguments().constFirst() : QStringLiteral(""<executable_name>"");\n",1129,refs/changes/36/336736/1
1,1,src/gui/kernel/qpalette.cpp,Ibfa925f3e4cb0be89915607eee142926e05000b5,282369,1,displayedData QStringLiteral resolve <NUMBER>x <NUMBER> arg p resolve <NUMBER> <NUMBER> ,"    displayedData << QStringLiteral(""resolve=0x%1"").arg(p.resolve(), 0, 16);",    QDebugStateSaver saver(dbg);\n    QDebug nospace = dbg.nospace();\n,1263,refs/changes/69/282369/1
1,1,src/corelib/kernel/qproperty.cpp,I9af4a99d49f4b02ee9645a2cc9a9a024a6a1a552,331673,2, sa QObjectBindableProperty Qt s Property System Qt Bindable Properties ,"  \sa QObjectBindableProperty, {Qt's Property System}, {Qt Bindable Properties}","\n  However, every write to the QObjectCompatProperty has to be analyzed carefully\n",1079,refs/changes/73/331673/2
1,1,src/corelib/text/qbytearray.cpp,I11cba17d428791e06c9bd4c7a727b7bd6b6aec3c,309111,3,But be careful when passing fixed size C arrays to QByteArray methods that,    But be careful when passing fixed size C arrays to QByteArray methods that,"    size, and not by scanning for the first '\\0' terminator. For example:\n    But be careful when passing fixed size C arrays (including string literals)\n    to QByteArray methods that accept a start-pointer or QByteArrayView: the",848,refs/changes/11/309111/3
1,1,src/corelib/kernel/qproperty.cpp,I56c0bce15af8121159630b5c0922c287c15b7618,331538,1,For example if the property is never read the change handler will,"  For example, if the property is never read, the change handler will",  non-dirty state to dirty state. It is marked as dirty\n  whenever any dependency changes. Is is marked non-dirty when it is read.\n,1039,refs/changes/38/331538/1
