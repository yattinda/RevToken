1,1,src/gui/kernel/qguiaction.cpp,Ic490a5e3470939ee8af612d46ff41d4c8c91fbdf,265909,2, property QAction iconText,    \property QAction::iconText,    \property QGuiAction::iconText\n    \property QGuiAction::iconText\n,635,refs/changes/09/265909/2
1,1,src/corelib/itemmodels/qabstractitemmodel.h,I2f6293ecf1b3150b9f407a7349579c17e650c340,303307,2,MatchFixedString ,"        MatchFixedString,","        MatchRegularExpression = 4,\n        MatchWildcard = 5,\n#endif",72,refs/changes/07/303307/2
1,1,src/corelib/io/qwindowspipereader.cpp,I66443c3021d6ba98639a214c3e768be97d2cf14b,331232,3, internal,    \internal,"\n    // Note that signals are not emitted in the call below, as the caller\n",148,refs/changes/32/331232/3
1,1,src/corelib/kernel/qwineventnotifier.cpp,I2fb1ba7254ecfd502a22c706404f92dd1bc3a584,340602,1, Wait for outstanding callback to complete ,    // Wait for outstanding callback to complete.,\nstatic const int bufferSize = 2048; // 2 paths (mount point+device) and metainfo;\n,283,refs/changes/02/340602/1
1,1,src/tools/moc/moc.cpp,I3519fe20233d473f34a24ec9589d045cdd162a12,286855,1,const int VersionComponentBits <NUMBER> ,    const int VersionComponentBits = 12;,    const int VersionComponentBits = 8;\n    const int VersionComponentBits = 8;\n,383,refs/changes/55/286855/1
1,1,src/corelib/kernel/qmetatype.h,I286fe173b43a495dbda8faa151a93895b4fd22e4,334549,1,const int aId ai ai a idHelper ,        const int aId = ai ? ai : a.idHelper();,        const int aId = a.id();\n        const int bId = b.id();\n,498,refs/changes/49/334549/1
1,1,src/corelib/kernel/qproperty.cpp,I56c0bce15af8121159630b5c0922c287c15b7618,331538,1,The change handler will be called whenever the value held by the,  The change handler will be called whenever the value held by the,  \snippet code/src_corelib_kernel_qproperty.cpp 4\n  The dirty handler will be called whenever the property transitions from\n  non-dirty state to dirty state. It is marked as dirty,1037,refs/changes/38/331538/1
1,1,src/gui/text/qtextengine.cpp,Ief1a97c52544b271556811816f7804074bd336df,300004,1,layoutData string QLatin<NUMBER>Char char <NUMBER>xA<NUMBER> ,            layoutData->string += QLatin1Char(char(0xA7));,            layoutData->string += QLatin1Char('\xA7');\n            layoutData->string += QLatin1Char('\xA7');\n,1890,refs/changes/04/300004/1
1,1,src/plugins/platforms/qnx/qqnxsimpleclipboard.h,I30e30a4d964697a44691363a181cdcef778da51b,313733,1,QVariant retrieveData const QString mimetype QVariant Type preferredType const ,"    QVariant retrieveData(const QString &mimetype, QVariant::Type preferredType) const;","    QVariant retrieveData(const QString &mimetype, QVariant::Type preferredType) const override;\n    QVariant retrieveData(const QString &mimetype, QVariant::Type preferredType) const override;\n",71,refs/changes/33/313733/1
1,1,tests/benchmarks/corelib/text/qregularexpression/main.cpp,Idef775ef6cf9f9ded3ce7ba5b85e460571d12756,325260,1,QTest newRow non empty article w noun w ,"    QTest::newRow(""non-empty"") << ""(?<article>\\w+) (?<noun>\\w+)""","    QTest::newRow(""non-empty"") << nonEmptyPattern << nonEmptyPatternOptions;\n    QTest::newRow(""non-empty"") << nonEmptyPattern << nonEmptyPatternOptions;\n",64,refs/changes/60/325260/1
1,1,src/plugins/platforms/windows/qwindowsscreen.cpp,I90b0b7563efc35c9bace07ccb3996350a957e8e5,266861,6,if result ERROR SUCCESS ,    if (result == ERROR_SUCCESS) {,"\n    return QtPrivate::QStringList_join_qst(self(), sep.data(), sep.size());\n",102,refs/changes/61/266861/6
1,1,src/corelib/global/qrandom.h,I3eb349b832c14610895efffd16356927fe78fd02,314217,1, algorithm could potentially run forever but the worst case cenario only,"    // algorithm could potentially run forever, but the worst case cenario only","    // will never need, then check if it's higher than ""highest"". The number of\n    // times the loop will run is unbounded but the probability of terminating\n    // is better than 1/2 on each iteration. Therefore, the average loop count",276,refs/changes/17/314217/1
1,1,examples/widgets/tools/codecs/encodingdialog.cpp,I9141320225037e1bc6b7f920bf01a9d0144fdac2,268730,2,QT TRANSLATE NOOP EncodingDialog wchar t on Windows char<NUMBER> t ,"    QT_TRANSLATE_NOOP(""EncodingDialog"", ""wchar_t on Windows, char16_t""),","    QT_TRANSLATE_NOOP(""EncodingDialog"", ""wchar_t on Windows, char16_t everywhere""),\n    QT_TRANSLATE_NOOP(""EncodingDialog"", ""wchar_t on Windows, char16_t everywhere""),\n",251,refs/changes/30/268730/2
1,1,src/gui/kernel/qevent.cpp,Id96e837c5f7487f367a07f73e807eac5aae65bf1,264021,1,Returns the mouse cursor s position relative to the receiving scene or window ,    Returns the mouse cursor's position relative to the receiving scene or window.,    Returns the mouse cursor's position relative to the receiving window.\n    Returns the mouse cursor's position relative to the receiving window.\n,151,refs/changes/21/264021/1
1,1,src/corelib/io/qwindowspipereader.cpp,I66443c3021d6ba98639a214c3e768be97d2cf14b,331232,3, internal,    \internal,"\n    // Note that signals are not emitted in the call below, as the caller\n",148,refs/changes/32/331232/3
1,1,src/corelib/io/qprocess_unix.cpp,Ia8b65350cd5d49debca9fffd15f801161363aea7,292539,1, this is a virtual call and it base behavior is to do nothing ,"    // this is a virtual call, and it base behavior is to do nothing.","    // this is a virtual call, and its base behavior is to do nothing.\n    // this is a virtual call, and its base behavior is to do nothing.\n",380,refs/changes/39/292539/1
1,1,src/corelib/kernel/qproperty.h,I9bb49e457165ddc1e4c8bbdf3d3c9fbf5ff27e94,316302,7,quintptr nodeState ,        quintptr nodeState;,        QPropertyObserver **nodeState;\n        QPropertyObserver **nodeState;\n,261,refs/changes/02/316302/7
1,1,src/corelib/time/qdatetime.cpp,I81afda9063fa232d06841d63f69e19b49f8083f3,314629,2, note Day and month names are given in English ,    \note Day and month names are given in English.,"    QLocale::system().toDateTime().\n    \note Day and month names as well as AM/PM indication are given in English (C locale).\n    If localized month and day names and localized forms of AM/PM are used, use",1130,refs/changes/29/314629/2
1,1,src/gui/kernel/qplatformintegration.h,I849943b03655f6c6d9690c9a223fcf6858120729,325879,1,SplitterMouseExtraMargin,        SplitterMouseExtraMargin,        MinimumMouseAreaSize\n        MinimumMouseAreaSize\n,199,refs/changes/79/325879/1
1,1,src/corelib/text/qstringconverter.cpp,I31f03518fd9c70507cbd210a8bcf405b6a0106b1,298943,6,int pos matcher indexIn header ,    int pos = matcher.indexIn(header);,"    int pos = header.indexOf(""meta "");\n    int pos = header.indexOf(""meta "");\n",1542,refs/changes/43/298943/6
1,1,src/concurrent/qtconcurrentrun.cpp,Ic8233aeffbdbd1420bdbde7ad7d03f25cd438ea8,310873,3,These functions are a part of the Qt Concurrent framework ,    These functions are a part of the Qt Concurrent framework.,    These functions are part of the Qt Concurrent framework.\n    These functions are part of the Qt Concurrent framework.\n,55,refs/changes/73/310873/3
1,1,tests/auto/corelib/kernel/qdeadlinetimer/tst_qdeadlinetimer.cpp,Ib691f5f23a92fb8b41a24f7b603981d9c9450ddc,314417,2,QTRY VERIFY WITH TIMEOUT timersExecuted <NUMBER> minResolution ,"    QTRY_VERIFY_WITH_TIMEOUT(timersExecuted, 4 * minResolution);","        QSKIP(""Looks like timers didn't fire on time."");\n    if (!QTest::qWaitFor([&timersExecuted]() { return timersExecuted; }, 4 * minResolution))\n        QSKIP(""Looks like timers didn't fire on time."");",596,refs/changes/17/314417/2
1,1,src/corelib/io/qwindowspipereader_p.h,I38ed4861a238e39e793c3716e856e5bfdeed3d74,330320,1,enum State Stopped Running Aborted ,"    enum State { Stopped, Running, Aborted };","    enum State { Stopped, Running, Draining } state;\n    enum State { Stopped, Running, Draining } state;\n",116,refs/changes/20/330320/1
1,1,src/network/ssl/qtlsbackend.cpp,I8409d81fd11fb46e6ab4465b4937a7680a8c2447,331335,2,class BackEndFactoryCollection,class BackEndFactoryCollection,class BackendCollection\nclass BackendCollection\n,58,refs/changes/35/331335/2
1,1,src/network/access/decompresshelper.cpp,Iecf3e359734163f15686c949f75d41fa4794a00e,296785,7,return true ,    return true;,"\n            qint64 bytesRead = countHelper->read(temp.data(), temp.size());\n",201,refs/changes/85/296785/7
1,1,tests/auto/corelib/kernel/qvariant/tst_qvariant.cpp,I363621033f7fc600edcea2acb786820ccba49c86,311545,5,QMetaType registerMutableView MyType MyTypeView MyType data ,"    QMetaType::registerMutableView<MyType, MyTypeView>([&](MyType &data) {","    const bool success = QMetaType::registerMutableView<MyType, MyTypeView>([&](MyType &data) {\n    const bool success = QMetaType::registerMutableView<MyType, MyTypeView>([&](MyType &data) {\n",4746,refs/changes/45/311545/5
1,1,src/corelib/io/qprocess_p.h,Ib295bcc91e358926893e9756e3b89346560329f4,324021,1,bool performDying bool readyReadEmitted nullptr ,    bool performDying(bool *readyReadEmitted = nullptr);,\n    const auto charFormat = doc->begin().begin().fragment().charFormat();\n,323,refs/changes/21/324021/1
1,1,src/corelib/io/qwindowspipereader.cpp,I66443c3021d6ba98639a214c3e768be97d2cf14b,331232,3, internal,    \internal,"\n    // Note that signals are not emitted in the call below, as the caller\n",148,refs/changes/32/331232/3
1,1,src/corelib/text/qstringview.h,I6df3a9507276f5d16d044a6bdbe0e4810cf99440,300457,1,Q CORE EXPORT double toDouble bool ok nullptr const ,    Q_CORE_EXPORT double toDouble(bool *ok = nullptr) const;,    Q_REQUIRED_RESULT Q_CORE_EXPORT float toFloat(bool *ok = nullptr) const;\n    Q_REQUIRED_RESULT Q_CORE_EXPORT double toDouble(bool *ok = nullptr) const;\n,335,refs/changes/57/300457/1
1,1,src/plugins/platforms/qnx/qqnxsimpleclipboard.cpp,I30e30a4d964697a44691363a181cdcef778da51b,313733,1,QFile file m clipboardDir filePath fileName ,    QFile file(m_clipboardDir.filePath(fileName));,    if (!file.open(QIODevice::ReadOnly))\n    QSaveFile file(m_clipboardDir.filePath(fileName));\n    if (!file.open(QIODevice::ReadOnly)),282,refs/changes/33/313733/1
1,1,src/concurrent/qtconcurrentrun.cpp,Ic8233aeffbdbd1420bdbde7ad7d03f25cd438ea8,310873,3,The a function is expected to declare void as its return value,    The \a function is expected to declare void as its return value,"    and must take an additional argument of \e {QPromise<T> &} type,\n    The \a function is expected to return void\n    and must take an additional argument of \e {QPromise<T> &} type,",281,refs/changes/73/310873/3
1,1,src/network/ssl/qsslsocket_mac.cpp,I05877de9c02857594e76b24d52e7578bdb01df69,330049,4,return false ,        return false;,"\n        qCWarning(lcSsl) << ""Cannot provide the list of supported protocols for the backend"" << backendName;\n",1577,refs/changes/49/330049/4
1,1,tests/auto/widgets/widgets/qdatetimeedit/tst_qdatetimeedit.cpp,I05eaaf57d87a9111d3609ebab81bc707f8af98f0,298180,1, endif,#endif,\n                Start or finish a scrolling sequence by grabbing/releasing the wheel via\n,4545,refs/changes/80/298180/1
1,1,src/corelib/text/qlocale_p.h,Iea47e0f8fc8b40378df7fffd1624c20707a6ca39,308614,1,qsizetype processed <NUMBER> negative value means error,    qsizetype processed = -1;    // negative value means error,    qsizetype processed = -1;\n\n    // positive for success (0 means nothing parsed; -1 means we did try to,72,refs/changes/14/308614/1
1,1,src/corelib/tools/qhash.cpp,I614d7b3082e91c9d16e0441649d6a153b222bd2e,316032,1, endif,#  endif,"\n        QCOMPARE(result, std::vector<int>({ 2, 4, 6 }));\n",395,refs/changes/32/316032/1
1,1,src/corelib/kernel/qproperty.h,I43803a0dfe210353d0235f0373d2257f75ffe534,331153,2,return QUntypedPropertyBinding ,            return QUntypedPropertyBinding {};,\n            return QUntypedPropertyBinding {};\n,605,refs/changes/53/331153/2
1,1,src/corelib/text/qanystringview.h,Ia7179760fca0e0b67d52f5accb0a62e389b17913,301594,1, Q ANY SV MAKE RELOP ,//Q_ANY_SV_MAKE_RELOP(<=>),#ifdef __cpp_impl_three_way_comparison\nQ_ANY_SV_MAKE_RELOP(<=>)\n#else,228,refs/changes/94/301594/1
1,1,src/corelib/text/qchar.cpp,I6175f6ab9bcf1956f6f97ab0c9d9d5aaf777296d,320486,2,QString str ,    QString str;,    QString str = getString();\n    QString str = getString();\n,2137,refs/changes/86/320486/2
1,1,src/corelib/kernel/qcore_mac_p.h,Ibb0a9c0bcfefbda4347737212e40e300a3184982,300230,3,NSObject object nil ,    NSObject *object = nil;,    NSObject *object = nullptr;\n    NSObject *object = nullptr;\n,418,refs/changes/30/300230/3
1,1,src/plugins/platforms/xcb/qxcbconnection_xi2.cpp,Ie6a3d8dd494f981e8706b9a66a1021dfb51baec4,323794,6,QInputDevice Capability Scroll <NUMBER> ,"                                                              QInputDevice::Capability::Scroll, 3);",                                                              QInputDevice::Capability::Scroll);\n                                                              QInputDevice::Capability::Scroll);\n,261,refs/changes/94/323794/6
1,1,src/gui/image/qiconloader_p.h,Ic08a899321eaffc46b8461aaee3dbaa4d2c727a9,305159,2, include QtCore QList ,#    include <QtCore/QList>,#include <QtCore/QTypeInfo>\n#include <QtCore/QList>\n#include <QtCore/QTypeInfo>,63,refs/changes/59/305159/2
1,1,src/corelib/time/qcalendar.cpp,I28a473896539b79bbd4b6729b3a417631f9ac8c6,270316,2,return calendarRegistry byName keys ,    return calendarRegistry->byName.keys();,    return result;\n    QStringList result;\n    for (const auto &pair : calendarRegistry->byName),509,refs/changes/16/270316/2
1,1,src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp,I903085ddeac59224715dca6e8a1ff26c44f5b0b0,277795,1,while i <NUMBER> ,    while(i > 0) {,    while (i > 0) {\n    while (i > 0) {\n,1396,refs/changes/95/277795/1
1,1,src/corelib/kernel/qproperty.cpp,I43803a0dfe210353d0235f0373d2257f75ffe534,331153,2, obsolete,  \obsolete,\n  Returns a default constructed QUntypedPropertyBinding if no binding is set.\n,1389,refs/changes/53/331153/2
1,1,src/corelib/kernel/qvariant.h,I46617cc4d5c1e8c162d0f1f7ae32e4cfe9ce915c,256661,1, if possible we reuse the current QVariant private,    //if possible we reuse the current QVariant private,    // If possible we reuse the current QVariant private.\n    // If possible we reuse the current QVariant private.\n,551,refs/changes/61/256661/1
1,1,src/corelib/time/qdatetime.cpp,I81afda9063fa232d06841d63f69e19b49f8083f3,314629,2, note Day and month names are given in English ,    \note Day and month names are given in English.,"    If localized month and day names are desired, use\n    \note Day and month names are given in English (C locale).\n    If localized month and day names are desired, use",1130,refs/changes/29/314629/2
1,1,src/corelib/text/qregularexpression.cpp,Icb5efd5c6ef27f2e31a9780bf62f5671ddc603cd,311621,2,QList int capturedOffsets ,    QList<int> capturedOffsets; //,    QList<qsizetype> capturedOffsets;\n    QList<qsizetype> capturedOffsets;\n,790,refs/changes/21/311621/2
