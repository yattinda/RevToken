1,1,src/gui/kernel/qwindow.cpp,I201f5ee9c6a73b949986648e3bd288d2c7898f28,298812,1,The function is called when the window is requested to close Ignore the,    The function is called when the window is requested to close. Ignore the,    on the event if you want to prevent the window from being closed.\n    The function is called when the window is requested to close. Call \l{QEvent::ignore()}\n    on the event if you want to prevent the window from being closed.,2325,refs/changes/12/298812/1
1,1,src/gui/math3d/qvectornd.cpp,I601a830959d13a73dcb17ce31a1202a1486c8f7f,324688,2,either zero or NaN and returns a reference to this vector ,"    either zero or NaN, and returns a reference to this vector.","    Divides this vector's coordinates by the given \a divisor, and returns a\n    reference to this vector. The \a divisor must not be either zero or NaN.\n",285,refs/changes/88/324688/2
1,1,src/concurrent/qtconcurrentrun.cpp,Ic8233aeffbdbd1420bdbde7ad7d03f25cd438ea8,310873,3,running finished status and the return value of the function In addition ,"    running/finished status and the return value of the function. In addition,","    Similar to QtConcurrent::run(), the QFuture returned can be used to query for the\n    running/finished status and the value reported by the function. In addition,\n",287,refs/changes/73/310873/3
1,1,src/sql/kernel/qsqldriver.cpp,I0cb1c65b34befcb3690ccad3f081556dd2691344,309118,1,Returns the known maximum length for the identifier a type according to the database settings Returns,    Returns the known maximum length for the identifier \a type according to the database settings. Returns,    INT_MAX by default if the is no maximum for the database.\n    Returns the maximum length for the identifier \a type according to the database settings. Returns\n    INT_MAX by default if the is no maximum for the database.,835,refs/changes/18/309118/1
1,1,src/corelib/tools/qflatmap_p.h,Ife12576c4abb39a3ea2acb0a1ba0faca91b3a4c5,264927,2,if it content end it first x first ,        if (it != content.end() && it->first == x.first) {,"        auto &mc = mutableContent();\n        auto it = std::lower_bound(mc.begin(), mc.end(), key,\n                                   [this](const value_type &v, const Key &k)",107,refs/changes/27/264927/2
