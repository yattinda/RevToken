label,status,file_dir,change_id,change_num,patch_set,shaped_code,before_code,after_code,line,ref
1,1,src/corelib/io/qresource.cpp,I0ff4ed146fe53922691d5473d0c236f31d478a04,318137,1,ok data len file read char data data len ,"                ok = (data_len == file.read((char *)data, data_len));","                ok = (data_len == file.read(reinterpret_cast<char *>(data), data_len));\n                ok = (data_len == file.read(reinterpret_cast<char *>(data), data_len));\n",1202,refs/changes/37/318137/1
1,1,tests/auto/concurrent/qtconcurrentfiltermapgenerated/generation_helpers.h,I61ed1758601e219c5852e8cc939c5feebb23d2f6,316819,16,bool operator const T el return el value <NUMBER> ,    bool operator()(const T &el) { return (el.value & 1); },    bool operator()(const T &el) { return el.isOdd(); }\n    bool operator()(const T &el) { return el.isOdd(); }\n,123,refs/changes/19/316819/16
1,1,src/gui/accessible/qaccessiblecache.cpp,I72b2d5a93f6b397fd3666d45951109e3e5aff754,300336,4,QVector QPair QAccessible Id const QMetaObject values objectToId values obj ,"    QVector<QPair<QAccessible::Id, const QMetaObject*>> values = objectToId.values(obj);",    if (const QMetaObject *mo = obj->metaObject()) {\n        for (auto pair : objectToId.values(obj)) {\n,130,refs/changes/36/300336/4
1,1,src/corelib/thread/qfuture_impl.h,Ic9fa978380e2c24e190e68d974051a650b0e5571,297139,7,if constexpr std is invocable v std decay t Function QFuture void ,"                if constexpr (std::is_invocable_v<std::decay_t<Function>, QFuture<void>>)","                fulfillPromiseWithResult();\n                fulfillPromiseWithVoidResult();\n            } else if constexpr (std::is_invocable_v<Function, ParentResultType>) {",296,refs/changes/39/297139/7
1,1,tests/manual/qopenglwidget/openglwidget/main.cpp,Ie0455c890c048c52eacad1badd6d21df999badf9,306957,1,Tools t wnd glw<NUMBER> QList QWidget glw glw<NUMBER> glw<NUMBER> glw<NUMBER> ,"    Tools t(&wnd, glw3, QList<QWidget *>() << glw << glw2 << glw3 << glw4);","    Tools t(&wnd, glw3, QWidgetList { glw, glw2, glw3, glw4 });\n    Tools t(&wnd, glw3, QWidgetList { glw, glw2, glw3, glw4 });\n",215,refs/changes/57/306957/1
1,1,src/tools/androiddeployqt/main.cpp,I1fac51ed9e88ef42c761bc916ba1c3bf439806e8,309567,1, To canceal the keystore information the keystore and alias n ,"                    ""       ** To canceal the keystore information, the keystore and alias\n""","                    ""         passwords respectively. This option needs only the --sign parameter.\n""\n                    ""       NOTE: To conceal the keystore information, the environment variables\n""\n                    ""         QT_ANDROID_KEYSTORE_PATH, and QT_ANDROID_KEYSTORE_ALIAS are used to\n""",636,refs/changes/67/309567/1
1,1,src/network/access/decompresshelper.cpp,Iecf3e359734163f15686c949f75d41fa4794a00e,296785,7,uncompressedBytes countHelper read temp data temp size ,"            uncompressedBytes += countHelper->read(temp.data(), temp.size());","            uncompressedBytes += bytesRead;\n            qint64 bytesRead = countHelper->read(temp.data(), temp.size());\n            if (bytesRead == -1) {",198,refs/changes/85/296785/7
1,1,src/corelib/text/qbytearray.cpp,I2925d9908f8654599195a2860847b17083911b41,302364,2, this QLocaleData c doubleToString n prec form <NUMBER> flags toLatin<NUMBER> TODO UTF <NUMBER> ,"    *this = QLocaleData::c()->doubleToString(n, prec, form, -1, flags).toLatin1(); // TODO UTF-8 ?","    *this = QLocaleData::c()->doubleToString(n, prec, form, -1, flags).toUtf8();\n    *this = QLocaleData::c()->doubleToString(n, prec, form, -1, flags).toUtf8();\n",4185,refs/changes/64/302364/2
1,1,src/gui/painting/qprintrangecollection.cpp,I0be5a8a64781c411f83b96a24f216605a84958e5,258431,2,std sort intervals begin intervals end const QPair int int a const QPair int int b ,"    std::sort(intervals.begin(), intervals.end(), [](const QPair<int, int> &a, const QPair<int, int> &b) {","    std::sort(intervals.begin(), intervals.end());\n    std::sort(intervals.begin(), intervals.end());\n",53,refs/changes/31/258431/2
1,1,tests/auto/corelib/time/qdatetime/tst_qdatetime.cpp,I0330b647fa011be99141dde09001ff2d58bd3a5f,313316,2,const QByteArray pY QString number positiveYearNumber toLatin<NUMBER> ,        const QByteArray pY = QString::number(positiveYearNumber).toLatin1();,        const QByteArray nY = QByteArray::number(negativeYearNumber);\n        const QByteArray pY = QByteArray::number(positiveYearNumber);\n        const QByteArray nY = QByteArray::number(negativeYearNumber);,2020,refs/changes/16/313316/2
1,1,src/corelib/kernel/qvariant.cpp,I65aac3ec4d50d62424ee33f44b99f3cfb91121d6,267954,1, if defined QT BOOTSTRAPPED QT CONFIG easingcurve ,#if !defined(QT_BOOTSTRAPPED) && QT_CONFIG(easingcurve),#if QT_CONFIG(easingcurve)\n#if QT_CONFIG(easingcurve)\n,2795,refs/changes/54/267954/1
1,1,src/tools/androiddeployqt/main.cpp,Iad8c74d30d090adf69a17f2dafb455dff50b3d99,317412,1,QString fileName QFileInfo reader attributes value QLatin<NUMBER>String file toString filePath ,"                    QString fileName = QFileInfo(reader.attributes().value(QLatin1String(""file"")).toString()).filePath();","                    QString fileName = QDir::cleanPath(reader.attributes().value(QLatin1String(""file"")).toString());\n                    QString fileName = QDir::cleanPath(reader.attributes().value(QLatin1String(""file"")).toString());\n",1633,refs/changes/12/317412/1
1,1,src/corelib/io/qdir.cpp,I2c3bbaefa6b6f08ebf0b90fb7be62e3c6243f19d,295730,1,const auto dirElts qToStringViewIgnoringNull dir split QLatin<NUMBER>Char Qt SkipEmptyParts ,"    const auto dirElts = qToStringViewIgnoringNull(dir).split(QLatin1Char('/'), Qt::SkipEmptyParts);","    const auto fileElts = file.tokenize(QLatin1Char('/'), Qt::SkipEmptyParts);\n    const auto dirElts = dir.tokenize(QLatin1Char('/'), Qt::SkipEmptyParts);\n    const auto fileElts = file.tokenize(QLatin1Char('/'), Qt::SkipEmptyParts);",881,refs/changes/30/295730/1
1,1,src/corelib/kernel/qproperty.h,I43803a0dfe210353d0235f0373d2257f75ffe534,331153,2,quintptr const QUntypedPropertyData d const QPropertyBindingSourceLocation location QUntypedPropertyBinding,"        quintptr(+[](const QUntypedPropertyData *d, const QPropertyBindingSourceLocation &location) -> QUntypedPropertyBinding","        { return Qt::makePropertyBinding([d]() -> T { return static_cast<const Property *>(d)->value(); }, location); },\n        [](const QUntypedPropertyData *d, const QPropertyBindingSourceLocation &location) -> QUntypedPropertyBinding\n        { return Qt::makePropertyBinding([d]() -> T { return static_cast<const Property *>(d)->value(); }, location); },",507,refs/changes/53/331153/2
1,1,src/corelib/tools/qpoolallocator.h,I1ee03f2182201ba6d0c9f5189ab80af8cadce683,270142,1,auto previous std atomic load typename ArenaData AtomicNode d atomicStack ,            auto previous = std::atomic_load<typename ArenaData::AtomicNode>(&d->atomicStack);,            auto previous = d->atomicStack.load(std::memory_order_relaxed);\n            auto previous = d->atomicStack.load(std::memory_order_relaxed);\n,178,refs/changes/42/270142/1
1,1,src/gui/kernel/qevent_p.h,If30566ec4e4ca0077dd5ce494981418e5ba9c28d,305084,3,return static cast QMutableEventPoint static cast QEventPoint me ,        return static_cast<QMutableEventPoint *>(static_cast<QEventPoint *>(me));,        return static_cast<QMutableEventPoint *>(me);\n        return static_cast<QMutableEventPoint *>(me);\n,67,refs/changes/84/305084/3
1,1,src/corelib/io/qdebug.cpp,I4ca4a35b687b46c39030fffd1626ae6c3294cacf,309096,1,using the locale s <NUMBER> bit codec for some backends which may cause garbled,"    using the locale's 8-bit codec for some backends, which may cause garbled","    output. Note that QDebug buffers internally as UTF-16 and may need to\n    transform to 8-bit using the localae's codec in order to use some backends,\n    which may cause garbled (mojibake) in the output. Restricting to US-ASCII",614,refs/changes/96/309096/1
1,1,tests/auto/tools/qmakelib/evaltest.cpp,I9046dcb14ed520d8868a511d79da6e721e26f72b,308544,1,parser parsedProBlock QStringView out <NUMBER> out <NUMBER> QMakeParser FullGrammar ,"            parser.parsedProBlock(QStringView{ out }, 0, ""out"", 1, QMakeParser::FullGrammar);","            parser.parsedProBlock(out, 0, ""out"", 1, QMakeParser::FullGrammar);\n            parser.parsedProBlock(out, 0, ""out"", 1, QMakeParser::FullGrammar);\n",2873,refs/changes/44/308544/1
1,1,src/testlib/qtestjunitstreamer.cpp,I55598eafa7dafa486ac5a8221029c332ff47413b,329830,5, Errors are written as CDATA within system out comments elsewhere,"    // Errors are written as CDATA within system-out, comments elsewhere","    // respectively, comments elsewhere\n    // Messages/errors are written as CDATA within system-out, system-err,\n    // respectively, comments elsewhere",151,refs/changes/30/329830/5
1,1,src/corelib/text/qregularexpression.cpp,I06b4f54e300541033a9a18339c97338717a06da0,323089,4,return QStringList QString default behavior for empty pattern,        return QStringList({ QString() }); // default behavior for empty pattern,        return QStringList { QString() }; // default behavior for empty pattern\n        return QStringList { QString() }; // default behavior for empty pattern\n,1497,refs/changes/89/323089/4
1,1,src/corelib/thread/qpromise.h,Ibab9681d35fe63754bf394ad0e7923e2683e2457,300337,1,void setFilterMode bool enable d setFilterMode enable ,    void setFilterMode(bool enable) { d.setFilterMode(enable); },"\n        d.reportResult(std::forward<U>(result), index);\n",99,refs/changes/37/300337/1
1,1,src/corelib/tools/qflatmap_p.h,Ife12576c4abb39a3ea2acb0a1ba0faca91b3a4c5,264927,2,value type x std move key T ,"        value_type x{ std::move(key), T() };",            mc.erase(it);\n        T result;\n        auto &mc = mutableContent();,116,refs/changes/27/264927/2
1,1,src/corelib/thread/qfuture.h,I9494ddc58c6db192c66edb988105927da6d61a3b,294437,7,template typename T T typename QtPrivate EnableForNonVoid T ,"    template<typename T_ = T, typename = QtPrivate::EnableForNonVoid<T_>>","    template<typename U = T, typename = QtPrivate::EnableForNonVoid<U>>\n    template<typename U = T, typename = QtPrivate::EnableForNonVoid<U>>\n",65,refs/changes/37/294437/7
1,1,src/concurrent/qtconcurrentfilter.h,I219f08d73b97317820ec6e329ab1e6c89c0545f1,318848,2,reduce ResultType std forward InitialValueType initialValue options ,"            reduce, ResultType(std::forward<InitialValueType>(initialValue)), options);","            ResultType(std::forward<InitialValueType>(initialValue)), options);\n            ResultType(std::forward<InitialValueType>(initialValue)), options);\n",335,refs/changes/48/318848/2
1,1,src/corelib/kernel/qproperty.h,I3551e4357fe5780fb75da80bf8be208ec152dc2a,305075,2,if constexpr std is invocable v decltype Callback Class ,"        if constexpr (std::is_invocable_v<decltype(Callback), Class>) {","            // When newValue is T, we move it, if it's const T& it stays const T& and won't get moved\n        if constexpr (CallbackAcceptsOldValue) {\n            // When newValue is T, we move it, if it's const T& it stays const T& and won't get moved",480,refs/changes/75/305075/2
1,1,src/corelib/tools/qstring.h,I9b7748db95291c34b95ff3ad3e3aabc8215aeaae,253644,2,QT DEPRECATED X Use vasprintf arg or QTextStream instead ,"    QT_DEPRECATED_X(""Use vasprintf(), arg() or QTextStream instead"")","    QT_DEPRECATED_X(""Use asprintf(), arg() or QTextStream instead"")\n    QT_DEPRECATED_X(""Use asprintf(), arg() or QTextStream instead"")\n",326,refs/changes/44/253644/2
1,1,src/gui/kernel/qpalette.cpp,Ibfa925f3e4cb0be89915607eee142926e05000b5,282369,1,displayedData QStringLiteral resolve <NUMBER>x <NUMBER> arg p resolve <NUMBER> <NUMBER> ,"    displayedData << QStringLiteral(""resolve=0x%1"").arg(p.resolve(), 0, 16);",    QDebugStateSaver saver(dbg);\n    QDebug nospace = dbg.nospace();\n,1263,refs/changes/69/282369/1
1,1,src/corelib/kernel/qproperty.cpp,I9af4a99d49f4b02ee9645a2cc9a9a024a6a1a552,331673,2, sa QObjectBindableProperty Qt s Property System Qt Bindable Properties ,"  \sa QObjectBindableProperty, {Qt's Property System}, {Qt Bindable Properties}","\n  However, every write to the QObjectCompatProperty has to be analyzed carefully\n",1079,refs/changes/73/331673/2
1,1,src/corelib/text/qbytearray.cpp,I11cba17d428791e06c9bd4c7a727b7bd6b6aec3c,309111,3,But be careful when passing fixed size C arrays to QByteArray methods that,    But be careful when passing fixed size C arrays to QByteArray methods that,"    size, and not by scanning for the first '\\0' terminator. For example:\n    But be careful when passing fixed size C arrays (including string literals)\n    to QByteArray methods that accept a start-pointer or QByteArrayView: the",848,refs/changes/11/309111/3
1,1,src/corelib/kernel/qproperty.cpp,I56c0bce15af8121159630b5c0922c287c15b7618,331538,1,For example if the property is never read the change handler will,"  For example, if the property is never read, the change handler will",  non-dirty state to dirty state. It is marked as dirty\n  whenever any dependency changes. Is is marked non-dirty when it is read.\n,1039,refs/changes/38/331538/1
